/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kmeans;

import java.awt.List;
import java.util.Arrays;
import java.util.Collections;
import javax.swing.JOptionPane;
import sun.security.util.Length;

/**
 *
 * @author thiag
 */
public class Tela extends javax.swing.JFrame {
    
    private double[][] dados;
    private String[] cabecalho;
    private String[] itens;
    
    
    /**
     * Creates new form Tela
     */
    public Tela() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaTexto = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tela");

        jButton1.setText("Enviar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Entrada de Dados");

        jTextAreaTexto.setColumns(20);
        jTextAreaTexto.setRows(5);
        jScrollPane1.setViewportView(jTextAreaTexto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String papo = jTextAreaTexto.getText();
        String quantLinha[] = papo.split("\n"); // Pega número de linhas
        System.out.println(quantLinha.length);
        String quantColuna[] = quantLinha[0].split(","); //Pega número de colunas
        System.out.println(quantColuna.length);
        String papoTotal = papo.replace("\n", ",").trim(); //Todos os elementos separados por virgula
        System.out.println(papoTotal);
        String vetorTotal[] = papoTotal.split(","); //Insere todos os elementos em um vetor
        double vetorDados[] = new double[(quantColuna.length-1)*(quantLinha.length-1) ]; //Recebe apenas os dados (sem cabecalho e classe)
        String[][] dados = new String[quantLinha.length][quantColuna.length];//Matriz dos Dados
        double[][] dadosNormalizados = null;
        String cabecalho[] = quantLinha[0].split(",");//Cabecalho de atributos e classe  
        double numMax;//número Máximo dos dados
        double numMin;//número Mínimo dos dados
       
        System.out.println("Vetor Total:");
        //Preenchendo a matriz com tudo
        int k = 0;
        for (int i = 0; i <= quantColuna.length-1; i++) {
            for (int j = 0; j <= quantLinha.length-1; j++) {
                dados[i][j] = vetorTotal[k];
                System.out.println(vetorTotal[k]);
                k++;
            }
        }
        System.out.println("Dados: " + dados.length);
        System.out.println(vetorTotal.length);
        System.out.println("Vetor Dados:");
        
        //Preenchendo vetor apenas com os dados
        k = 0;
        for (int i = 1; i <= quantColuna.length-1; i++) {
            for (int j = 0; j <= quantLinha.length-2; j++) {
                vetorDados[k] = Double.parseDouble(dados[i][j]);
                System.out.println(dados[i][j]);
                k++;
            }
        }
        System.out.println(vetorDados.length);
        
        for (int i = 0; i <= quantColuna.length-1; i++) {
            System.out.println("Coluna " + i);
            for (int j = 0; j <= quantLinha.length-1; j++) {
                System.out.println("Linha " + j + " : " + dados[i][j]);
            }
        }   
        
        //Cabecalho dos Dados
        System.out.println("\n\nCabecalho de Dados");
        for (int i = 0; i < cabecalho.length; i++) {
            System.out.println(cabecalho[i]);
        }
        
        //Adicionando Dados a Array Redundante
        Double vetorDadosNormalizados[] = new Double[vetorDados.length];
        for (int i = 0; i < vetorDados.length; i++) {
            vetorDadosNormalizados[i] = vetorDados[i];
        }

        //Encontrando os maiores e menores valores dos dados
        Arrays.sort(vetorDadosNormalizados);
        numMin = vetorDadosNormalizados[0];
        numMax = vetorDadosNormalizados[vetorDadosNormalizados.length - 1];
        System.out.println("Minimo: " + numMin);
        System.out.println("Maximo: " + numMax);
        for (int i = 0; i < vetorDados.length; i++) {
            vetorDadosNormalizados[i] = (vetorDados[i] - numMin) / (numMax - numMin);
            System.out.println(vetorDadosNormalizados[i]);
        }
        
        
        for (int i = 0; i <= quantColuna.length-1; i++) {
            for (int j = 0; j <= quantLinha.length-1; j++) {
                dadosNormalizados[i][j] = vetorDadosNormalizados[k];
                k++;
            }
        }
        
        this.setDados(dadosNormalizados);
        this.setCabecalho(cabecalho);
        this.setItens(quantLinha);
        JOptionPane.showMessageDialog(rootPane, "Dados normalizados!");
        //System.out.println(papo);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaTexto;
    // End of variables declaration//GEN-END:variables

    public double[][] getDados() {
        return dados;
    }

    public void setDados(double[][] dados) {
        this.dados = dados;
    }

    public String[] getCabecalho() {
        return cabecalho;
    }

    public void setCabecalho(String[] cabecalho) {
        this.cabecalho = cabecalho;
    }

    public String[] getItens() {
        return itens;
    }

    public void setItens(String[] itens) {
        this.itens = itens;
    }
}
